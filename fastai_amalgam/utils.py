# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils.ipynb (unless otherwise specified).

__all__ = ['open_image', 'img2arraylike', 'make_img_grid']

# Cell
from fastai.vision.all import *

# Cell
import PIL
from typing import List
from torchvision.utils import make_grid

# Cell
def open_image(fname:Union[str,Path], size:tuple=None, as_array=False, as_tensor=False):
    'Open a _single_ image from disk, optionally resize and/or convert to array'
    img = PIL.Image.open(fname).convert('RGB')
    if isinstance(size, float): size = L(img.size).map(lambda x: int(x*size))
    if size is not None: img = img.resize(size)
    if as_array or as_tensor: return img2arraylike(img, as_array, as_tensor)
    return img

def img2arraylike(img:PIL.Image.Image, as_array=False, as_tensor=True):
    img = np.array(img).transpose(2,0,1)
    if as_array: return img
    if as_tensor: return torch.from_numpy(img)

def make_img_grid(images : Union[List[str], List[PILImage], List[PIL.Image.Image]],
                  img_size : Union[tuple, float, None] = (480,270),
                  ncol : int=8
                  ) -> PIL.Image.Image:
    """Make a grid of images from `images` with `ncol` columns.

    `images` can be a list of filenames or a list of PIL Images,
             which will be resized to `img_size`
    `img_size` must be used unless all images are of the same size
    """
    if not isinstance(images, (list,L)): raise TypeError(f"Expected a list of (paths,PILImage,PIL.Image.Image) objects, got {type(images)} instead")
    if isinstance(images[0], (str,Path)):
        img_list = [open_image(f, as_tensor=True, size=img_size) for f in images]
    if isinstance(images[0], (PILImage, PIL.Image.Image)):
        img_list = images
        if img_size is not None:
            img_list = [img.resize((img_size)) for img in img_list]
        img_list = [img2arraylike(img) for img in img_list]
    grid_array = make_grid(img_list, nrow=ncol)
    grid_array = grid_array.numpy().transpose((1,2,0))
    return PIL.Image.fromarray(grid_array)